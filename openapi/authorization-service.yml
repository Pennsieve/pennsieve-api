openapi: '3.0.0'
info:
  title: 'Authorization Service'
  description: 'Authorization Service v1 API'
  version: '1.0.0'

servers:
- url: https://api.pennsieve.net
- url: https://api.pennsieve.io

tags:
- name: Authentication
- name: Authorization

paths:
  '/account/login':
    post:
      tags:
      - Authentication
      summary: Log in with email and password
      description: "Allows a user to log in with email and password"
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwoFactorLoginResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: string

  '/account/logout':
    post:
      tags:
      - Authentication
      summary: Log out
      description: "Allows a user to log out"
      operationId: logout
      x-scala-package: authentication
      responses:
        200:
          description: Sucess
        401:
          description: Unauthorized
      security:
      - Bearer: []

  '/account/api/session':
    post:
      tags:
      - Authentication
      summary: Log in with token and secret
      description: "Allows a user to log in with token and secret"
      operationId: sessionLogin
      x-scala-package: authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionLoginRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionLoginResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: string

  '/account/login/twofactor':
    post:
      tags:
      - Authentication
      summary: Log in with two factor authentication
      description: "Allows a user to log in with two factor authentication"
      operationId: twoFactorLogin
      x-scala-package: authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFactorLoginRequest'
        required: true
      parameters:
      - in: cookie
        name: authorization
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          description: Bad Request
        401:
          description: Unauthorized
      security:
      - Bearer: []

  '/session/switch-organization':
    put:
      tags:
      - Authorization
      summary: Switch the organization they are logged in
      description: "Allows a user to switch the organization they are logged in"
      operationId: switchOrganization
      x-scala-package: authorization
      parameters:
      - name: organization_id
        in: query
        description: Organization Id
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginProfile"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: string
      security:
      - Bearer: []

  '/authorization/organizations/{organizationId}/datasets/{datasetId}/discover/preview':
    get:
      tags:
        - Authorization
      operationId: authorizeDiscoverPreview
      x-jvm-package: authorization
      parameters:
        - name: organizationId
          in: path
          description: organization id
          required: true
          schema:
            type: integer
            format: int32
        - name: datasetId
          in: path
          description: dataset id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Success
        401:
          description: Unauthorized

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: server.auth.decode_token

  schemas:
    LoginRequest:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
        password:
          type: string

    SessionLoginRequest:
      type: object
      required:
      - tokenId
      - secret
      properties:
        tokenId:
          type: string
          format: uuid
        secret:
          type: string
          format: uuid

    TwoFactorLoginRequest:
      type: object
      required:
      - token
      properties:
        token:
          type: string
          format: uuid

    LoginResponse:
      type: object
      required:
      - sessionToken
      - organization
      - profile
      - message
      properties:
        sessionToken:
          type: string
          format: uuid
        organization:
          type: string
        message:
          type: string
        profile:
          $ref: "#/components/schemas/LoginProfile"

    SessionLoginResponse:
      type: object
      required:
      - sessionToken
      - organization
      - expiresIn
      properties:
        sessionToken:
          type: string
          format: uuid
        organization:
          type: string
        expiresIn:
          type: integer
          format: int32

    LoginProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        credential:
          type: string
        color:
          type: string
        url:
          type: string
        authyId:
          type: integer
        isSuperAdmin:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        preferredOrganization:
          type: string
        orcid:
          $ref: "#/components/schemas/Orcid"
        pennsieveTermsOfService:
          $ref: "#/components/schemas/PennsieveTermsOfService"
        customTermsOfService:
          type: array
          items:
            $ref: "#/components/schemas/CustomTermsOfService"
        isOwner:
          type: boolean
        storage:
          type: integer
          format: int64

    Orcid:
      type: object
      properties:
        name:
          type: string
        orcid:
          type: string

    PennsieveTermsOfService:
      type: object
      properties:
        version:
          type: string

    CustomTermsOfService:
      type: object
      properties:
        version:
          type: string
        organizationId:
          type: string

    TwoFactorLoginResponse:
      type: object
      properties:
        sessionToken:
          type: string
        message:
          type: string
        organization:
          type: string
        expiresIn:
          type: integer
          format: int32
