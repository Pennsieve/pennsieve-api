#!groovy

timestamps {
    def pennsieveNexusCreds = usernamePassword(
        credentialsId: 'pennsieve-nexus-ci-login',
        usernameVariable: 'PENNSIEVE_NEXUS_USER',
        passwordVariable: 'PENNSIEVE_NEXUS_PW'
    )

    node('prod-executor') {
        try {
            stage('Run migrations') {
                if (params.RUN_MIGRATIONS) {
                    echo "Running PROD Postgres Schema Migrations"
                    build job: "Migrations/prod-migrations/prod-postgres-migrations",
                    parameters: [
                        string(name: 'IMAGE_TAG', value: params.IMAGE_TAG)
                    ]
                }
            }

            def services = [
                'admin',
                'api',
                'authorization-service',
                'discover-publish',
                'etl-data-cli',
                'jobs',
                'uploads-consumer'
            ]

            stage('Deploy') {
                def deploySteps = services.collectEntries {
                    ["${it}" : generateDeployStep(it, params.IMAGE_TAG)]
                }
                deploySteps.failFast = true
                parallel deploySteps
            }
        } catch (e) {
            slackSend(color: '#FF0000', message: "FAILED: Production API Deploy - ${params.IMAGE_TAG}")
            throw e
        }
        slackSend(color: '#00FF00', message: "SUCCESS: Production API Deploy - ${params.IMAGE_TAG}")
    }
}

// Generate parallel deploy steps
def generateDeployStep(String service, String imageTag) {
    return {
        build job: "service-deploy/pennsieve-prod/us-east-1/prod-vpc-use1/prod/${service}",
        parameters: [
            string(name: 'IMAGE_TAG', value: params.IMAGE_TAG),
            string(name: "TERRAFORM_ACTION", value: "apply")
        ]
    }
}
