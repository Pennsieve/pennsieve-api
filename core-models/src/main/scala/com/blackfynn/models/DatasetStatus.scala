package com.pennsieve.models

import io.circe.{ Decoder, Encoder }
import io.circe.generic.semiauto.{ deriveDecoder, deriveEncoder }

import enumeratum.EnumEntry.{ Snakecase, UpperSnakecase }
import enumeratum._

import java.time.ZonedDateTime

/**
  * The `name` column is a backwards-compatible identifier containing the old
  * enumerated status options. For new status options, `name` is generated by
  * converting `displayName` to UPPER_SNAKE_CASE.
  *
  * The default dataset status options are tied back to Blackfynn`s hardcoded
  * defaults via the `originalName` column.
  */
case class DatasetStatus(
  name: String,
  displayName: String,
  color: String,
  originalName: Option[DefaultDatasetStatus],
  createdAt: ZonedDateTime = ZonedDateTime.now(),
  updatedAt: ZonedDateTime = ZonedDateTime.now(),
  id: Int = 0
)

case class DatasetStatusInUse(value: Boolean) extends AnyVal

object DatasetStatusInUse {
  implicit val inUseEncoder: Encoder[DatasetStatusInUse] =
    Encoder.encodeBoolean.contramap[DatasetStatusInUse](_.value)
  implicit val inUseDecoder: Decoder[DatasetStatusInUse] =
    Decoder.decodeBoolean.map(DatasetStatusInUse(_))
}

sealed trait DefaultDatasetStatus extends EnumEntry with UpperSnakecase

object DefaultDatasetStatus
    extends Enum[DefaultDatasetStatus]
    with CirceEnum[DefaultDatasetStatus] {
  val values = findValues
  case object NoStatus extends DefaultDatasetStatus
  case object WorkInProgress extends DefaultDatasetStatus
  case object Completed extends DefaultDatasetStatus
  case object InReview extends DefaultDatasetStatus
}
